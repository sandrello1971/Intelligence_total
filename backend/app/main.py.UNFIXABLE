# app/main.py
# FastAPI Main Application - IntelligenceHUB Complete System
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import asyncpg
from dotenv import load_dotenv
load_dotenv()
# Import dei router esistenti (con gestione errori)
routers_loaded = {}
    routers_loaded['rag'] = None
    routers_loaded['intellichat'] = None
    routers_loaded['webscraping'] = None
# App initialization
app = FastAPI(
    title="IntelligenceHUB",
    version="5.0.0",
    description="IntelligenceHUB - Complete AI Platform with RAG, IntelliChat, WebScraping"
)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
# Include all available routers
if routers_loaded['rag']:
    app.include_router(routers_loaded['rag'], prefix="/api/v1")
    app.include_router(routers_loaded['intellichat'], prefix="/api/v1")
if routers_loaded['webscraping']:
    app.include_router(routers_loaded['webscraping'], prefix="/api")
    print("✅ WebScraping routes registered at /api/web-scraping")
# Database connection (compatibilità con il main.py esistente)
async def get_db_connection():
    return await asyncpg.connect(
        host="localhost",
        port=5432,
        user="intelligence_user", 
        password="intelligence_pass",
        database="intelligence"
    )
@app.get("/")
async def root():
    return {
        "message": "IntelligenceHUB API", 
        "version": "5.0.0", 
        "status": "operational",
        "modules_loaded": {k: v is not None for k, v in routers_loaded.items()},
        "endpoints": {
            "health": "/health",
            "docs": "/docs",
            "rag": "/api/v1/rag/health" if routers_loaded['rag'] else "not_available",
            "intellichat": "/api/v1/intellichat/health" if routers_loaded['intellichat'] else "not_available",
            "webscraping": "/api/web-scraping/scraped-sites" if routers_loaded['webscraping'] else "not_available"
        }
    }
@app.get("/health")
async def health_check():
    return {
        "status": "healthy", 
        "version": "5.0.0", 
        "service": "IntelligenceHUB",
        "modules": {k: v is not None for k, v in routers_loaded.items()}
    }
@app.get("/api/health")
async def api_health_check():
    return await health_check()
# AUTH ENDPOINTS (manteniamo quelli che funzionano)
@app.post("/api/auth/login")
@app.post("/api/v1/auth/login")
@app.post("/api/v1/auth/login1")
async def login(credentials: dict):
    email = credentials.get("email", "").strip()
    password = credentials.get("password", "")
    if not email or not password:
        raise HTTPException(status_code=400, detail="Email and password required")
        print(f"Login error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")
# USERS ENDPOINTS (manteniamo quelli che funzionano)
@app.get("/api/v1/users")
@app.get("/api/users")
@app.get("/api/v1/admin/users/")
@app.get("/api/v1/admin/users")
async def get_users():
        print(f"Users list error: {e}")
        raise HTTPException(status_code=500, detail="Error loading users")
# Admin endpoints
@app.get("/api/v1/admin/dashboard")
async def admin_dashboard():
        return {"error": str(e)}
if __name__ == "__main__":
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)
# Import new routes
# from app.routes.users_complete import router as users_router
# Register new routes
# app.include_router(users_router)
# Companies API
# Kit Commerciali API
# Articles API
# Companies API - Simple version
# Registra Business Cards router
    print(f"❌ Errore registrazione Business Cards: {e}")
# Kit Commerciali Routes
# Kit Commerciali Routes
