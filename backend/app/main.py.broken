    from app.services.web_scraping_v2.migrate_db import migrate_database
    
    # Run migration
    migrate_database()
    
    # Include router
    app.include_router(web_scraping_v2_router)
    print("‚úÖ Web Scraping V2 loaded successfully!")
    
except Exception as e:
    print(f"‚ö†Ô∏è Web Scraping V2 failed to load: {e}")
"""
Intelligence AI Platform - Main FastAPI Application
"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# Import working routes
from app.routes import auth, tasks_direct, tickets_direct, dashboard, milestones, templates, commesse, admin_users
from app.api.v1.ai_routes import router as ai_new_router

# Create FastAPI app

# Web Scraping flags initialization
WEB_SCRAPING_AVAILABLE = False
INTELLICHAT_ENHANCED_AVAILABLE = False

app = FastAPI(
    title="üß† Intelligence AI Platform",
    description="Advanced AI-powered business management platform for SMEs",
    version="2.0.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include working routers
app.include_router(auth.router, prefix="/api/v1/auth")

# Web Scraping Routes
try:
    from app.services.web_scraping.api_routes_working import router as web_scraping_router
    app.include_router(web_scraping_router)
    print("‚úÖ Web Scraping Routes caricati")
except Exception as e:
    print(f"‚ö†Ô∏è Web Scraping Routes non caricati: {e}")
# Web Scraping Module Integration - ISOLATED
try:
    from app.services.web_scraping.api_routes_working import router as web_scraping_router
    app.include_router(web_scraping_router)
    print("üöÄ Web Scraping Module LOADED!")
    WEB_SCRAPING_AVAILABLE = True
except Exception as e:
    print(f"‚ö†Ô∏è Web Scraping Routes non caricati: {e}")
    WEB_SCRAPING_AVAILABLE = False

# Missing Routes - Frontend Fix
try:
    from app.routes import admin_users, rag_routes
    app.include_router(admin_users.router, prefix="/api/v1")
    app.include_router(rag_routes.router, prefix="/api/v1")
    print("‚úÖ Admin Users & RAG routes loaded!")
except Exception as e:
    print(f"‚ö†Ô∏è Missing routes error: {e}")
    # Fallback routes se import fallisce
    from fastapi import APIRouter
    
    # Admin fallback
    admin_fallback = APIRouter(prefix="/api/v1/admin", tags=["admin"])
    @admin_fallback.get("/users/")
    async def fallback_users():
        return {"users": [], "total": 0, "status": "fallback"}
    
    # RAG fallback  
    rag_fallback = APIRouter(prefix="/api/v1/rag", tags=["rag"])
    @rag_fallback.get("/documents")
    async def fallback_documents():
        return {"documents": [], "total": 0}
    @rag_fallback.get("/stats") 
    async def fallback_stats():
        return {"total_documents": 0, "total_chunks": 0, "total_points": 0}
    
    app.include_router(admin_fallback)
# Web Scraping V2 Integration
    app.include_router(rag_fallback)
try:
    print("üîß Fallback routes loaded")
    from app.services.web_scraping_v2.api_routes import router as web_scraping_v2_router
